# Automaticly generated by wsjcpp@v0.0.1
cmake_minimum_required(VERSION 3.0)

add_definitions(-DWSJCPP_VERSION="v0.2.23")
add_definitions(-DWSJCPP_NAME="fhq-server")

if (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
    set(MACOSX TRUE)
endif()

set(CMAKE_CXX_STANDARD 11)

set (WSJCPP_LIBRARIES "")
set (WSJCPP_INCLUDE_DIRS "")
set (WSJCPP_SOURCES "")

find_package(Threads REQUIRED)
list (APPEND WSJCPP_LIBRARIES ${CMAKE_THREAD_LIBS_INIT})

# wsjcpp-levenshtein:v0.0.1
list (APPEND WSJCPP_INCLUDE_DIRS "./src.wsjcpp/wsjcpp_levenshtein/")
list (APPEND WSJCPP_SOURCES "./src.wsjcpp/wsjcpp_levenshtein/wsjcpp_levenshtein.cpp")
list (APPEND WSJCPP_SOURCES "./src.wsjcpp/wsjcpp_levenshtein/wsjcpp_levenshtein.h")

# wsjcpp-hashes:v0.0.1
list (APPEND WSJCPP_INCLUDE_DIRS "./src.wsjcpp/wsjcpp_hashes/")
list (APPEND WSJCPP_SOURCES "./src.wsjcpp/wsjcpp_hashes/md5.cpp")
list (APPEND WSJCPP_SOURCES "./src.wsjcpp/wsjcpp_hashes/md5.h")
list (APPEND WSJCPP_SOURCES "./src.wsjcpp/wsjcpp_hashes/smallsha1.h")
list (APPEND WSJCPP_SOURCES "./src.wsjcpp/wsjcpp_hashes/smallsha1.cpp")
list (APPEND WSJCPP_SOURCES "./src.wsjcpp/wsjcpp_hashes/wsjcpp_hashes.cpp")
list (APPEND WSJCPP_SOURCES "./src.wsjcpp/wsjcpp_hashes/wsjcpp_hashes.h")

# wsjcpp-core:v0.0.5
list (APPEND WSJCPP_INCLUDE_DIRS "./src.wsjcpp/wsjcpp_core/")
list (APPEND WSJCPP_SOURCES "./src.wsjcpp/wsjcpp_core/wsjcpp_core.cpp")
list (APPEND WSJCPP_SOURCES "./src.wsjcpp/wsjcpp_core/wsjcpp_core.h")

# nlohmann/json:v3.7.3
list (APPEND WSJCPP_INCLUDE_DIRS "./src.wsjcpp/nlohmann_json/")
list (APPEND WSJCPP_SOURCES "./src.wsjcpp/nlohmann_json/json.hpp")

# wsjcpp-validators:v0.0.3
list (APPEND WSJCPP_INCLUDE_DIRS "./src.wsjcpp/wsjcpp_validators/")
list (APPEND WSJCPP_SOURCES "./src.wsjcpp/wsjcpp_validators/wsjcpp_validators.h")
list (APPEND WSJCPP_SOURCES "./src.wsjcpp/wsjcpp_validators/wsjcpp_validators.cpp")

# wsjcpp-print-tree:v0.0.1
list (APPEND WSJCPP_INCLUDE_DIRS "./src.wsjcpp/wsjcpp_print_tree/")
list (APPEND WSJCPP_SOURCES "./src.wsjcpp/wsjcpp_print_tree/wsjcpp_print_tree.h")
list (APPEND WSJCPP_SOURCES "./src.wsjcpp/wsjcpp_print_tree/wsjcpp_print_tree.cpp")

# wsjcpp-geoip:v0.0.2
list (APPEND WSJCPP_INCLUDE_DIRS "./src.wsjcpp/wsjcpp_geoip/")
list (APPEND WSJCPP_SOURCES "./src.wsjcpp/wsjcpp_geoip/wsjcpp_geoip.cpp")
list (APPEND WSJCPP_SOURCES "./src.wsjcpp/wsjcpp_geoip/wsjcpp_geoip.h")

# wsjcpp-light-web-server:v0.0.1
list (APPEND WSJCPP_INCLUDE_DIRS "./src.wsjcpp/wsjcpp_light_web_server/")
list (APPEND WSJCPP_SOURCES "./src.wsjcpp/wsjcpp_light_web_server/wsjcpp_light_web_http_request.h")
list (APPEND WSJCPP_SOURCES "./src.wsjcpp/wsjcpp_light_web_server/wsjcpp_light_web_http_request.cpp")
list (APPEND WSJCPP_SOURCES "./src.wsjcpp/wsjcpp_light_web_server/wsjcpp_light_web_http_response.h")
list (APPEND WSJCPP_SOURCES "./src.wsjcpp/wsjcpp_light_web_server/wsjcpp_light_web_http_response.cpp")
list (APPEND WSJCPP_SOURCES "./src.wsjcpp/wsjcpp_light_web_server/wsjcpp_light_web_deque_http_requests.h")
list (APPEND WSJCPP_SOURCES "./src.wsjcpp/wsjcpp_light_web_server/wsjcpp_light_web_deque_http_requests.cpp")
list (APPEND WSJCPP_SOURCES "./src.wsjcpp/wsjcpp_light_web_server/wsjcpp_light_web_http_handler_rewrite_folder.h")
list (APPEND WSJCPP_SOURCES "./src.wsjcpp/wsjcpp_light_web_server/wsjcpp_light_web_http_handler_rewrite_folder.cpp")
list (APPEND WSJCPP_SOURCES "./src.wsjcpp/wsjcpp_light_web_server/wsjcpp_light_web_http_handler_web_folder.h")
list (APPEND WSJCPP_SOURCES "./src.wsjcpp/wsjcpp_light_web_server/wsjcpp_light_web_http_handler_web_folder.cpp")
list (APPEND WSJCPP_SOURCES "./src.wsjcpp/wsjcpp_light_web_server/wsjcpp_light_web_server.h")
list (APPEND WSJCPP_SOURCES "./src.wsjcpp/wsjcpp_light_web_server/wsjcpp_light_web_server.cpp")

# required-pkg-config
## CURL
FIND_PACKAGE(CURL)
IF(CURL_FOUND)
   list (APPEND WSJCPP_INCLUDE_DIRS ${CURL_INCLUDE_DIR})
   list (APPEND WSJCPP_LIBRARIES ${CURL_LIBRARIES})
ELSE(CURL_FOUND)
   MESSAGE(FATAL_ERROR "Could not find the CURL library and development files.")
ENDIF(CURL_FOUND)
## PNG
FIND_PACKAGE(PNG)
IF(PNG_FOUND)
   list (APPEND WSJCPP_INCLUDE_DIRS ${PNG_INCLUDE_DIR})
   list (APPEND WSJCPP_LIBRARIES ${PNG_LIBRARIES})
ELSE(PNG_FOUND)
   MESSAGE(FATAL_ERROR "Could not find the PNG library and development files.")
ENDIF(PNG_FOUND)
## ZLIB
FIND_PACKAGE(ZLIB)
IF(ZLIB_FOUND)
   list (APPEND WSJCPP_INCLUDE_DIRS ${ZLIB_INCLUDE_DIR})
   list (APPEND WSJCPP_LIBRARIES ${ZLIB_LIBRARIES})
ELSE(ZLIB_FOUND)
   MESSAGE(FATAL_ERROR "Could not find the ZLIB library and development files.")
ENDIF(ZLIB_FOUND)


